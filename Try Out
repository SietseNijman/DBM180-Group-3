import java.io.*;
import java.util.*;

weka.classifiers.trees.J48 j48 = null;
Instances data = null;

String predict(double h, double w) {
  String r = "Sorry, unable to predict";
  if (j48 == null) return r;

  // build a new instance with the given input
  Instance di = new DenseInstance(3);
  di.setDataset(data);
  di.setValue(0, h);
  di.setValue(1, w);

  try { 
    int i = (int)j48.classifyInstance(di);
    r = di.classAttribute().value(i);
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
  return r;
}

//String prediction = predict(160, 70);

void setup() {
  size (300, 300);
  background (0);

  loadData(dataPath("hwg.csv"));
  //j48Train();
  //saveModel(dataPath("j48.model"), j48);
  loadModel(dataPath("j48_2.model"));

  println(predict(180, 70));
  //String prediction = predict(160, 70);
  //println (prediction);
}
void draw () {
  String prediction = predict(160, 70);
  //String test = "test";
  //prediction = predict(180, 70);
  println (prediction);
  
  fill (255);
  text (predict(180, 70), 20, 20);
  text (predict(160, 70), 20, 40);
  text (prediction, 20, 60);

  //fill (255,0,0);
  //rect (80, 80, 100, 100);

  if (prediction == "Male") {
    fill (255, 0, 0);
    rect (80, 80, 100, 100);
    //background (0);
  }
  if (prediction == "Female") {
    fill (0, 255, 0);
    rect (80, 80, 100, 100);
    //background (255);
  }

  //if (test == "test") {
  //  fill (255, 0, 0);
  //  rect (80, 80, 100, 100);
  //  //background (0);
  //  println (test);
  //}
}
void loadData(String filepath) {
  try { 
    weka.core.converters.ConverterUtils.DataSource source 
      = new weka.core.converters.ConverterUtils.DataSource(filepath);
    data = source.getDataSet();
    // setting class attribute if the data format does not provide this information
    // For example, the XRFF format saves the class attribute information as well
    if (data.classIndex() == -1)
      data.setClassIndex(data.numAttributes() - 1);
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}

void j48Train()
{
  try {
    j48 = new weka.classifiers.trees.J48();
    j48.setOptions(weka.core.Utils.splitOptions("-C 0.25 -M 2"));
    j48.buildClassifier(data);  
    weka.classifiers.Evaluation eval = new weka.classifiers.Evaluation(data);
    eval.crossValidateModel(         //cross-validate
      j48, data, 10, //with 10 folds
      new Random(1));                //and random number generator with seed 1

    println(eval.errorRate());       //Printing Training Mean root squared Error
    println(eval.toSummaryString()); //Summary of Training
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}

void loadModel(String filepath) {
  try {
    j48 = (weka.classifiers.trees.J48) SerializationHelper.read(filepath);
    println("J48 loaded");
    println(j48.toString());
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}

void saveModel(String filepath, weka.classifiers.trees.J48 j) {
  try {
    SerializationHelper.write(filepath, j);
  }
  catch(Exception ex) {
    ex.printStackTrace();
  }
}
